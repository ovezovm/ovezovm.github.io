<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog | My Site</title>
    <link>http://localhost:43799/post/</link>
      <atom:link href="http://localhost:43799/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Blog</description>
    <generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><lastBuildDate>Wed, 03 Jul 2024 00:00:00 +0000</lastBuildDate>
    <image>
      <url>http://localhost:43799/media/icon_hu7729264130191091259.png</url>
      <title>Blog</title>
      <link>http://localhost:43799/post/</link>
    </image>
    
    <item>
      <title>Refactoring Art or Necessity?</title>
      <link>http://localhost:43799/post/post-na-vibor-5/</link>
      <pubDate>Wed, 03 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:43799/post/post-na-vibor-5/</guid>
      <description>&lt;h2 id=&#34;refactoring-art-or-necessity&#34;&gt;Refactoring: Art or Necessity?&lt;/h2&gt;
&lt;p&gt;Refactoring isn&amp;rsquo;t just a useful practice; sometimes, it&amp;rsquo;s a critical necessity for the long-term health of a codebase. Recently, I had to refactor code that I had written several months ago. It was not the most pleasant encounter with my past self.&lt;/p&gt;
&lt;p&gt;When I initially wrote the code, I thought the structure was logical and well-designed. But months later, with a fresh look, I saw numerous problems: excessive dependencies, code duplication, and functions that were too large and complicated. Sure, it worked, but the thought of maintaining and expanding that system was terrifying.&lt;/p&gt;
&lt;p&gt;Problems I Encountered
Excessive dependencies: Components that shouldn&amp;rsquo;t have been linked ended up being tightly coupled, making the code cumbersome and difficult to modify.&lt;/p&gt;
&lt;p&gt;Code duplication: A common problem where the same logic is repeated across several places instead of being extracted into a separate function.&lt;/p&gt;
&lt;p&gt;Poor readability: My functions were too long and handled too many tasks at once, making them hard to understand and modify.&lt;/p&gt;
&lt;p&gt;What I Did
Broke down logic into smaller parts: Instead of having one massive function, I divided it into smaller, specialized ones, each handling only one responsibility.&lt;/p&gt;
&lt;p&gt;Eliminated unnecessary dependencies: I reviewed the connections between modules and components, eliminated unnecessary dependencies, and made the architecture more modular.&lt;/p&gt;
&lt;p&gt;Improved code readability: I made the code as understandable as possible, both for myself and for other developers who might work with it in the future. Clear variable and function names played a crucial role.&lt;/p&gt;
&lt;p&gt;Why Refactoring is So Important
Without regular refactoring, a codebase starts to grow unwieldy and difficult to manage. It&amp;rsquo;s like cleaning a house — if you don&amp;rsquo;t do it regularly, things will soon get cluttered. Refactoring helps improve the structure of the system, remove unnecessary elements, and make the code more flexible and easier to maintain.&lt;/p&gt;
&lt;p&gt;Though it took me a few days, the result was worth it. The system is now much easier to work with, and I feel confident that the next developer will have a much easier time making changes.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s why I consider refactoring not just a necessity, but an art. It&amp;rsquo;s a chance to make existing code better, cleaner, and more maintainable.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>When comments save lifes</title>
      <link>http://localhost:43799/post/post-na-vibor-4/</link>
      <pubDate>Wed, 03 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:43799/post/post-na-vibor-4/</guid>
      <description>&lt;h1 id=&#34;comments-everywhere&#34;&gt;Comments everywhere&lt;/h1&gt;
&lt;p&gt;We all know how important code comments are, but let’s be honest, we don’t always follow that rule. Last week, I found myself in a situation where comments literally saved my life (or at least my sanity). I was working on an old codebase that I hadn’t touched in months. It was an old project, and as you can guess, I’d forgotten most of it.&lt;/p&gt;
&lt;p&gt;When the time came to make changes, I realized that some sections of the code were just impossible to understand at first glance. Luckily, past me had left detailed comments. Honestly, it was the only way I could figure out what I meant back then. Thanks to those comments, I was able to quickly get up to speed and make the necessary changes. Without them, it would’ve taken me twice as long.&lt;/p&gt;
&lt;p&gt;The lesson? Never underestimate the power of good comments. When you revisit your code months later (or, even worse, someone else does), comments are your best friend. It’s one of those things that may seem unnecessary during development, but in the long run, they save you a ton of time and stress.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Joy (and Frustration) of Debugging</title>
      <link>http://localhost:43799/post/post-na-vibor-3/</link>
      <pubDate>Sat, 27 Apr 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:43799/post/post-na-vibor-3/</guid>
      <description>&lt;h1 id=&#34;the-joy-and-frustration-of-debugging&#34;&gt;The Joy (and Frustration) of Debugging&lt;/h1&gt;
&lt;p&gt;As a programmer, debugging is an integral part of my daily routine. At first glance, it may seem like the least exciting aspect of software development — after all, who enjoys fixing errors? But in reality, debugging is like solving a complex puzzle, and there’s a strange satisfaction that comes with tracking down an elusive bug.&lt;/p&gt;
&lt;p&gt;Take last week, for instance. I was working on a seemingly straightforward feature, a small addition to an existing module. The code looked clean, and I ran all my tests before deploying it. Everything seemed fine — until it wasn’t. The system crashed unexpectedly under specific conditions, and my initial reaction was disbelief. “There’s no way that’s my code!” I thought. But, spoiler alert: it was.&lt;/p&gt;
&lt;p&gt;What followed was a deep dive into log files, database queries, and API calls. Hours of staring at the screen, trying to find where the logic had gone astray. At times, it felt like chasing ghosts. I even had one of those moments where you swear the bug isn’t real, but then, as if to mock you, it reappears.&lt;/p&gt;
&lt;p&gt;Eventually, after much trial and error, I discovered the issue: a race condition triggered when two services tried to write to the same database table simultaneously. It wasn’t something I had anticipated, but once identified, the solution was straightforward. A few lines of code later, and the issue was gone.&lt;/p&gt;
&lt;p&gt;The most rewarding part of debugging isn’t just fixing the issue — it’s the learning that comes with it. Every bug teaches you something new, whether it’s about how databases handle concurrency, how memory is allocated, or how edge cases can break even the most well-designed systems. Debugging sharpens your problem-solving skills and, over time, makes you a better programmer.&lt;/p&gt;
&lt;p&gt;So, while bugs can be frustrating, they’re also opportunities. They force you to dig deeper into the system and your code, helping you understand both better. And that feeling when you finally resolve a tough bug? That’s one of the best parts of being a programmer.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Working with Bibliography  Tips and Best Practices</title>
      <link>http://localhost:43799/post/post-na-vibor-2/</link>
      <pubDate>Sat, 06 Apr 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:43799/post/post-na-vibor-2/</guid>
      <description>&lt;h1 id=&#34;working-with-bibliography--tips-and-best-practices&#34;&gt;Working with Bibliography : Tips and Best Practices&lt;/h1&gt;
&lt;p&gt;Whether you&amp;rsquo;re writing a research paper, thesis, or a simple academic article, managing your bibliography is a crucial part of the process. A well-structured bibliography not only provides credibility to your work but also ensures that readers can trace your sources. Here are a few tips and best practices to make working with bibliographies easier and more efficient.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Use Citation Management Tools
Tools like Zotero, EndNote, or Mendeley can significantly streamline the process. These tools allow you to organize your references, insert citations directly into your document, and automatically generate a bibliography in various citation styles (APA, MLA, Chicago, etc.). This eliminates much of the manual work and reduces the risk of errors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Understand Different Citation Styles
Different fields of study often require different citation styles. For example, APA is commonly used in social sciences, while MLA is popular in the humanities. It’s important to familiarize yourself with the requirements of your field and use the correct style for both in-text citations and your bibliography.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keep Track of Sources as You Research
One common mistake is leaving citations until the very end of the writing process. It’s a good habit to save source information as you go. This prevents the headache of trying to remember where specific pieces of information came from and ensures you don&amp;rsquo;t accidentally leave out any important references.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Be Consistent
Whether you&amp;rsquo;re manually formatting your bibliography or using a tool, make sure you stay consistent throughout your document. Inconsistent formatting can not only make your work look unprofessional but may also lead to point deductions in academic assessments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verify Accuracy
Always double-check the accuracy of your citations and bibliography. Small errors in author names, publication dates, or page numbers can undermine the credibility of your research. It’s worth taking a few minutes to verify each entry before submitting your work.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By following these simple practices, you’ll make your bibliography management more efficient, allowing you to focus on the quality of your writing.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Last week&#39;s post (August 24-31)</title>
      <link>http://localhost:43799/post/nedelniy-post-5/</link>
      <pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:43799/post/nedelniy-post-5/</guid>
      <description>&lt;h2 id=&#34;celebrating-milestones&#34;&gt;Celebrating Milestones&lt;/h2&gt;
&lt;p&gt;This week ended on a high note! After weeks of hard work, we finally hit a major milestone. The system passed load testing with flying colors, and the performance is now well within acceptable limits. My team and I had a small celebration at the end of the week.&lt;/p&gt;
&lt;p&gt;Looking back, I feel a great sense of accomplishment. From struggling with Docker and bugs to optimizing performance, this project has pushed me to improve my skills in many areas. Now we’re moving into the next phase — deploying the system to production. There’s still a lot to do, but I’m more confident than ever.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Last week&#39;s post (June 15-22)</title>
      <link>http://localhost:43799/post/nedelniy-post-3/</link>
      <pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:43799/post/nedelniy-post-3/</guid>
      <description>&lt;h2 id=&#34;refactoring-frenzy&#34;&gt;Refactoring Frenzy&lt;/h2&gt;
&lt;p&gt;After resolving most of the bugs last week, I realized the codebase had become quite messy. So this week was dedicated to refactoring. I reorganized several modules, cleaned up redundant code, and implemented a more consistent logging system.&lt;/p&gt;
&lt;p&gt;It was tedious work, but very satisfying. Seeing the code become more modular and easier to maintain is always rewarding. I also wrote additional unit tests to ensure future changes won’t break anything unexpectedly. Now the code is in much better shape, and I’m confident it’ll be easier to scale and extend.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Last week&#39;s post (June 23-30)</title>
      <link>http://localhost:43799/post/nedelniy-post-4/</link>
      <pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:43799/post/nedelniy-post-4/</guid>
      <description>&lt;h2 id=&#34;unexpected-challenges&#34;&gt;Unexpected Challenges&lt;/h2&gt;
&lt;p&gt;This week threw me a curveball. I encountered a serious performance issue during load testing. The system was much slower than expected under heavy traffic. After analyzing the logs, I found that one of the services was causing bottlenecks due to inefficient database queries.&lt;/p&gt;
&lt;p&gt;I spent days optimizing those queries, indexing database tables, and implementing caching mechanisms. By the end of the week, the performance improved significantly, but I still feel there’s room for further optimization. It’s been stressful, but I’ve learned a lot about performance tuning.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Last week&#39;s post (March 11-17)</title>
      <link>http://localhost:43799/post/nedelniy-post-1/</link>
      <pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:43799/post/nedelniy-post-1/</guid>
      <description>&lt;h2 id=&#34;the-social-aspect&#34;&gt;The social aspect&lt;/h2&gt;
&lt;p&gt;his week started with excitement. I was assigned a new project at work, which involves building a microservice architecture using Python and Docker.&lt;/p&gt;
&lt;h2 id=&#34;favorite-activity&#34;&gt;Favorite activity&lt;/h2&gt;
&lt;p&gt;I’ve worked with monolithic systems before, so diving into microservices is both a challenge and an opportunity for growth.&lt;/p&gt;
&lt;p&gt;I spent most of the week studying different design patterns, ensuring scalability and resilience in the system. There were moments of frustration, especially when Docker containers wouldn’t behave as expected.&lt;/p&gt;
&lt;h2 id=&#34;the-result&#34;&gt;The result&lt;/h2&gt;
&lt;p&gt;However, by the end of the week, I managed to get a working prototype of one service. It’s just the beginning, but I’m looking forward to the coming weeks!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Last week&#39;s post (May 22-28)</title>
      <link>http://localhost:43799/post/nedelniy-post-2/</link>
      <pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:43799/post/nedelniy-post-2/</guid>
      <description>&lt;h2 id=&#34;another-exhibition&#34;&gt;Another exhibition&lt;/h2&gt;
&lt;p&gt;This week turned out to be intense. After setting up the initial prototype last week, I started integrating the different services. And guess what? Bugs everywhere! The communication between services wasn’t as smooth as I had anticipated.&lt;/p&gt;
&lt;h2 id=&#34;study&#34;&gt;Study&lt;/h2&gt;
&lt;p&gt;I spent hours debugging issues related to network calls between Docker containers and configuring the message broker correctly.&lt;/p&gt;
&lt;h2 id=&#34;the-result&#34;&gt;The result&lt;/h2&gt;
&lt;p&gt;There were days when I felt like I was chasing ghosts in the code, but slowly things started to make sense. By Friday, I finally managed to fix the majority of the communication issues, and the system is now running more smoothly&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Version Control with Git.</title>
      <link>http://localhost:43799/post/post-na-vibor-1/</link>
      <pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:43799/post/post-na-vibor-1/</guid>
      <description>&lt;h1 id=&#34;version-control-with-git&#34;&gt;Version Control with Git&lt;/h1&gt;
&lt;p&gt;Git is a distributed version control system that has become an indispensable tool for software developers. It allows you to effectively manage code changes, collaborate with other developers, and track the history of your project. Let&amp;rsquo;s explore the key concepts and commands of Git.&lt;/p&gt;
&lt;h2 id=&#34;key-concepts-of-git&#34;&gt;Key Concepts of Git&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Repository - This is a storage place for your project, containing all files and change history.&lt;/li&gt;
&lt;li&gt;Commit represents a snapshot of the project&amp;rsquo;s state at a particular point in time. Each commit has a unique identifier and a message describing the changes made.&lt;/li&gt;
&lt;li&gt;Branch is an independent line of development in the repository. It allows you to work on new features or fixes without affecting the main branch.&lt;/li&gt;
&lt;li&gt;Merge is the process of combining changes from one branch into another. This allows you to integrate new features or fixes into the main branch of the project.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;key-git-commands&#34;&gt;Key Git Commands&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;git clone&lt;/strong&gt;: Clones an existing repository to your local machine.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;git commit&lt;/strong&gt;: Creates a new commit with added changes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;git branch&lt;/strong&gt;: Manages branches, allowing you to create, delete, and switch between branches.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;git merge&lt;/strong&gt;: Merges changes from one branch into the current branch.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;git pull&lt;/strong&gt;: Downloads changes from the remote repository and merges them into the current branch.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;git push&lt;/strong&gt;: Sends local commits to the remote repository.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;git init&lt;/strong&gt;: Initializes a new Git repository in the current directory.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;git add&lt;/strong&gt;: Adds changes to the index for subsequent commit.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;git status&lt;/strong&gt;: Displays the current state of the repository, showing changed, added, and deleted files.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;benefits-of-using-git&#34;&gt;Benefits of Using Git&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Versioning: Git allows you to save the history of changes, making it easier to track and revert to previous versions of the code.&lt;/li&gt;
&lt;li&gt;Collaboration: Git simplifies collaboration on a project, allowing multiple developers to work in parallel and merge their changes.&lt;/li&gt;
&lt;li&gt;Branching: Branches in Git provide flexibility and isolation when developing new features or fixing bugs.&lt;/li&gt;
&lt;li&gt;Distribution: Git is a distributed system, which means that every developer has a full copy of the repository and can work autonomously.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Git is a powerful tool that significantly simplifies version control and collaboration on projects. By mastering the key concepts and commands of Git, you can effectively control changes in your code and collaborate with other developers.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
